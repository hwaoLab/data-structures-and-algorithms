# 순열
def perm(s):
    if len(s) <2: # 문자 하나로는 순서 없음 바로 리턴 & 재귀 중단 
        return s
    res = []
    for i,c in enumerate(s):
        for cc in perm(s[:i]+s[i+1:]): #s[:i]+s[i+1:] 문장 전체에서 하나만 빼고 뽑는 구조 
            res.append(c +cc)
    return res


val = '012'
print(perm(val))

val[:1], val[2:], val[:1]+val[2:]

val[:0], val[1:], val[:0]+val[1:]

def combinations(s):
    if len(s) < 2:
        return s
    res = []
    for i,c in enumerate(s):
        res.append(c) # 중간에 뽑아주고 가면 모든 case가 나옴
        for cc in combinations(s[:i]+s[i+1:]):
            res.append(c+cc)
    return res

val ='abc'
combinations(val)

# 회문(앞뒤로 읽으나 동일한 단어와 구)인지 확인 하는 코드
def is_palindrome(s):
    l = s.split(" ")
    s2 = "".join(l)
    s3 =s2[::-1] # [::-1] 문장 반대로!
    if s2==s3:
        print(True)
    else: print(False)
    return s3

is_palindrome("다시 합창합시다")

def is_palindrome2(s):
    s = s.strip()
    if len(s) <2: 
        return True
    if s[0] ==s[-1]:
        is_palindrome(s[1:-1])
    else:
        return False

s = "다시 합창합시다!"
is_palindrome2(s)

def is_palindrome3(s):
    l = len(s)
    f,b = 0, l-1 
    while f < l//2:
        while s[f] ==" ":
            f+=1
        while s[b] == " ":
            b-=1
        if s[f] != s[b]:
            return False
        f +=1
        b -=1
    return True

s = "다시   합창합   시다"
is_palindrome3(s)
